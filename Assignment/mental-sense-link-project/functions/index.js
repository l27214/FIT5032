/* eslint-disable max-len */
/**
 * Import function triggers from their respective submodules:
 *
 * const {onCall} = require("firebase-functions/v2/https");
 * const {onDocumentWritten} = require("firebase-functions/v2/firestore");
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */


const {onRequest} = require("firebase-functions/v2/https");
const admin = require("firebase-admin");
const cors = require("cors")({origin: true});

const PDFDocument = require("pdfkit");
const {PassThrough} = require("stream");
const sgMail = require("@sendgrid/mail");

admin.initializeApp();

sgMail.setApiKey("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");
const fromEmail = "yiruliu0715@gmail.com";

// User stats function
exports.getUserStats = onRequest((req, res) => {
  cors(req, res, async () => {
    try {
      const usersSnapshot = await admin.firestore().collection("users").get();

      const stats = {
        countries: {},
        ageDistribution: {},
      };

      usersSnapshot.forEach((doc) => {
        const userData = doc.data();
        const country = userData.country || "Not Provided";
        let age = userData.age || "Not Provided";

        if (!stats.countries[country]) {
          stats.countries[country] = 0;
        }
        stats.countries[country] += 1;

        let ageRange = null;
        if (age !== "Not Provided" && !isNaN(age)) {
          age = parseInt(age);
          if (age <= 18) ageRange = "0-18";
          else if (age <= 25) ageRange = "19-25";
          else if (age <= 35) ageRange = "26-35";
          else if (age <= 50) ageRange = "36-50";
          else ageRange = "51+";
        }

        if (ageRange) {
          if (!stats.ageDistribution[ageRange]) {
            stats.ageDistribution[ageRange] = 0;
          }
          stats.ageDistribution[ageRange] += 1;
        }
      });

      res.status(200).send({
        countries: stats.countries,
        ageDistribution: stats.ageDistribution,
      });
    } catch (error) {
      console.error("Error fetching user stats:", error);
      res.status(500).send("Internal Server Error");
    }
  });
});

// Mental health quick test function
exports.calculateTestResults = onRequest(async (req, res) => {
  cors(req, res, async () => {
    res.setHeader("Access-Control-Allow-Origin", "*");
    res.setHeader("Content-Type", "application/pdf");

    if (req.method === "OPTIONS") {
      res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
      res.writeHead(200);
      res.end();
      return;
    }

    if (req.method !== "POST") {
      return res.status(405).send("Method Not Allowed");
    }

    const {submitData, totalPoints} = req.body;

    if (!Array.isArray(submitData)) {
      return res.status(400).send("Invalid submission data");
    }

    let feedback;
    if (totalPoints <= 4) {
      feedback = [
        "You might have been going through some challenging times recently, which is perfectly natural.",
        "It's important to remember that many people feel this way from time to time.",
        "Consider opening up to someone you trust, whether it's a close friend, a family member, or a professional who can offer support.",
        "They can help you work through these emotions in a caring and understanding way.",
      ].join("\n");
    } else if (totalPoints <= 8) {
      feedback = [
        "It looks like you're doing pretty well overall, which is great to see!",
        "But it might be a good idea to spend a little more time on self-care and pay attention to your feelings.",
        "Remember, taking some time for yourself and doing things that make you happy can really help improve how you feel.",
        "Making your well-being a priority is important for finding balance in life.",
      ].join("\n");
    } else if (totalPoints <= 11) {
      feedback = [
        "It seems like you're feeling pretty good lately, and that's fantastic!",
        "Keep up those healthy habits and keep doing what makes you happy and fulfilled.",
        "Your positive attitude is such a great thing to have!",
      ].join("\n");
    } else {
      feedback = [
        "It's so great to see that you're feeling awesome!",
        "Keeping this positive attitude can really help your overall well-being.",
        "Think about sharing your good vibes with others.",
        "Your outlook can inspire those around you to feel more positive too!",
      ].join("\n");
    }

    const doc = new PDFDocument();
    const stream = new PassThrough();
    const currentDate = new Date().toLocaleDateString();
    const companyName = "Mental Sense Link";

    doc.pipe(stream);

    doc.fontSize(18).text("Mental Health Quick Test Results", {align: "center"});
    doc.moveDown(0.5);
    doc.fontSize(12).text(`Generated by: ${companyName}`, {align: "right"});
    doc.text(`Date: ${currentDate}`, {align: "right"});
    doc.moveDown();
    doc.fontSize(14).text(`${feedback}`);
    doc.moveDown();
    doc.fontSize(16).text("Your Responses:");
    doc.moveDown();

    submitData.forEach((response, index) => {
      doc.fontSize(12).text(`Question ${index + 1}: ${response.questionText}`);
      doc.moveDown(0.5);
      doc.fontSize(12).text(`Your answer: ${response.response}`);
      doc.moveDown();
    });

    doc.end();
    stream.pipe(res);
  });
});


// SendGrid email sending function
exports.sendEmailFromSendGrid = onRequest((req, res) => {
  cors(req, res, async () => {
    if (req.method === "OPTIONS") {
      res.setHeader("Access-Control-Allow-Origin", "*");
      res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
      res.setHeader("Access-Control-Allow-Headers", "Content-Type");
      return res.status(204).send("");
    }

    if (req.method !== "POST") {
      return res.status(405).send("Method Not Allowed");
    }

    const {email, subject, message, pdfBase64} = req.body;
    const currentDate = new Date().toLocaleDateString();

    if (!email || !subject || !message || !pdfBase64 ) {
      return res.status(400).send("Invalid request body");
    }

    try {
      const msg = {
        to: email,
        from: fromEmail,
        subject,
        text: message,
        attachments: [
          {
            filename: `Mental-Sense-Link_Test_${currentDate}.pdf`,
            content: pdfBase64,
            type: "application/pdf",
            disposition: "attachment",
            content_id: "TestResult",
          },
        ],
      };

      await sgMail.send(msg);

      res.status(200).send("Email sent successfully");
    } catch (error) {
      console.error("Error sending email:", error);
      res.status(500).send(`Internal Server Error: ${error.message}`);
    }
  });
});
